require 'rbconfig'

module Gem
  module Micro
    class BinWrapperEmitter
      # Initializes a new BinWrapperEmitter with a +gem_name+ and a +bin_name+.
      def initialize(gem_name, bin_name)
        @gem_name, @bin_name = gem_name, bin_name
      end
      
      # Returns the full path to where the bin wrapper script should be
      # created. If Ruby was installed with a prefix or suffix it will be
      # inflected and added to the name of the executable.
      #
      # If the prefix is, for instance, `mac' an executable like +macrake+ will
      # be installed. With a suffix like `19' the name will be +rake19+.
      def bin_wrapper_file
        rbconfig('ruby_install_name').match /^(.*)ruby(.*)$/
        File.join(Config.bin_dir, "#{$1}#{@bin_name}#{$2}")
      end
      
      # Creates the bin wrapper script in bin_wrapper_file.
      def create_bin_wrapper!
        Utils.log(:debug, "Creating bin wrapper `#{bin_wrapper_file}'")
        File.open(bin_wrapper_file, 'w') { |f| f << to_ruby }
        File.chmod(0755, bin_wrapper_file)
      end
      
      # Returns a string representation of the bin wrapper file.
      def to_ruby
%{#!#{ File.join(rbconfig('bindir'), rbconfig('ruby_install_name')) }
#
# This file was generated by MicroGem (Âµgem).
#
# The application '#{@bin_name}' is installed as part of a gem, and
# this file is here to facilitate running it.

require 'rubygems'

version = "> 0"
if ARGV.first =~ /^_(.*)_$/ and Gem::Version.correct? $1 then
  version = $1
  ARGV.shift
end

gem '#{@gem_name}', version
load '#{@bin_name}'
}
      end
      
      private
      
      def rbconfig(key)
        ::Config::CONFIG[key]
      end
    end
  end
end